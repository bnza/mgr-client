import {writeFileSync, mkdirSync} from 'fs';
import {dirname} from 'path';
import dotenv from 'dotenv';

dotenv.config();

const apiBaseUrl = process.env.NUXT_PUBLIC_API_BASE_URL;
if (!apiBaseUrl) {
  console.error("NUXT_PUBLIC_API_BASE_URL is not defined in your .env file.");
  process.exit(1);
}

const docsUrl = `${apiBaseUrl}/api/docs.jsonopenapi`;

console.log(`Fetching OpenAPI docs from: ${docsUrl}`);

try {
  // Fetch the OpenAPI docs
  const response = await fetch(docsUrl);

  if (!response.ok) {
    console.error(`HTTP error! status: ${response.status}`);
    process.exit(1);
  }

  const openApiSpec = await response.json();

  // Find all collection operations (GET operations that return collections)
  const collectionOperations = [];

  if (openApiSpec.paths) {
    Object.entries(openApiSpec.paths).forEach(([path, pathItem]) => {
      if (pathItem.get) {
        const operation = pathItem.get;
        // Check if it's a collection operation by looking for operationId ending with 'get_collection'
        if (operation.operationId && operation.operationId.endsWith('_get_collection')) {
          collectionOperations.push({
            path,
            operationId: operation.operationId
          });
        }
      }
    });
  }

  if (collectionOperations.length === 0) {
    console.warn("No collection operations found");
    process.exit(0);
  }

  // Generate CollectionResponses type
  const responseEntries = collectionOperations
    .map(({path, operationId}) =>
      `  '${path}': operations['${operationId}']['responses'][200]['content']['application/ld+json']`
    )
    .join('\n');

  const tsContent = `// Auto-generated from OpenAPI docs at ${docsUrl}
// Do not edit this file manually

import { operations } from './openapi'

export type CollectionResponses = {
${responseEntries}
}
`;

  // Ensure directory exists
  const outputPath = './types/openapi-collection-operations.d.ts';
  mkdirSync(dirname(outputPath), {recursive: true});

  // Write the file
  writeFileSync(outputPath, tsContent, 'utf8');

  console.log(`Generated ${outputPath} with ${collectionOperations.length} collection operations`);
  console.log('Collection paths:', collectionOperations.map(({path}) => path).join(', '));

} catch (error) {
  console.error('Error generating collection responses types:', error.message);
  process.exit(1);
}
